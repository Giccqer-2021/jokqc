//build.gradle 文件相当于maven的pom.xml文件
//plugins 标签用于声明和应用构建脚本所需的插件,这些插件作用于整个项目的生命周期如编译,测试,打包,发布等
//相当于maven的<build>标签,必须独立写在顶部,不能应用于诸如 allprojects 这样的标签内部
plugins {
    //id 'java' //java插件,gradle默认启用该插件,该插件提供了编译,测试,打包等基本功能
    id 'java-library' //java库插件,相当于java插件的增强版,添加了 api 等方法
    id 'org.springframework.boot' version '3.4.0' //Springboot 核心插件
    id 'io.spring.dependency-management' version '1.1.6' //dependencyManagement 依赖版本管理插件
    id 'com.github.johnrengelman.shadow' version '8.1.1' //shadow 插件,用于打jar包
}

apply { from 'grammar-test.gradle' } //引入自定义脚本,该脚本与build.gradle在同一目录下
tasks.register('printGlobeMessage') {
    println customMessage4 //来自脚本的全局变量
}
dependencies {
    //为项目添加本地groovy语言支持,fileTree表示指定本地目录及其子目录中的文件集合,使用闭包配置该文件树导入的文件类型
    implementation fileTree('D:/gradle/groovy-4.0.24/lib') {
        include '*.jar'
        include '*/*.jar'
    }
}

//allprojects:对父项目与所有子项目有效
//subproject:对所有子项目有效
//不添加该标签:只对父项目有效
allprojects {
    apply { //传统的插件应用方式,为了保证能将上述插件传递到子项目,需要写上
        plugin 'java-library'
        plugin 'org.springframework.boot'
        plugin 'io.spring.dependency-management'
        plugin 'com.github.johnrengelman.shadow'
    }

    java { //配置所用的java源码和编译的版本,传入一个闭包进行配置
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach { //选择所有类型为JavaCompile的任务,对每个选中的任务进行配置
        options.encoding = 'UTF-8' //编译源码时的编码
    }

    repositories { //dependencies依赖的源仓库,如果使用安装时的gradle配置文件则可以不写
        mavenLocal()//本地maven仓库(不是gradle仓库)
        maven { //阿里云仓库
            url 'https://maven.aliyun.com/repository/public'
            name 'aliyun'
        }
        mavenCentral()//远程maven仓库
    }

    //注意:项目名写在settings.gradle文件中(rootProject.name),不写在这里
    group = 'org.giccqer' //项目组名
    version = '0.0.1' //版本号

    ext {
        jdbcVersion = '9.1.0' //自定义全局变量,写在 ext 标签中,可对依赖的版本进行统一管理
    }

    //项目依赖管理,添加依赖的通用格式为: implementation '组名:项目名:版本号'
    //如果项目被纳入了依赖管理(被置入dependencyManagement标签中或使用plugins标签中的插件)则不必写版本号
    dependencies {
        //gradle中的根项目不可以像maven那样声明自身为某项目的子项目(没有parent标签),以下Springboot的声明依赖相关插件
        //implementation 相当于 compile,编译,测试,运行时需要,会被打包,但不会将其传递给依赖当前项目的其他项目
        implementation('org.springframework.boot:spring-boot-starter-web') { //为避免歧义,要加括号
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'// 排除某个依赖
        }
        api 'io.netty:netty-all:5.0.0.Alpha2' //同implementation,但会传递给依赖当前项目的其他项目,需要java-library插件支持
        compileOnly 'org.ow2.asm:asm:9.7' //compileOnly 相当于provided,编译时需要,运行时不需要,不会被打包
        //runtimeOnly 相当于runtime,只参与项目的运行和测试,不参与编译,不会被打包.该段字符串由于使用了ext全局变量,所以必须使用双引号
        runtimeOnly "com.mysql:mysql-connector-j:${jdbcVersion}"

        compileOnly 'org.projectlombok:lombok' //只在编译时需要
        annotationProcessor 'org.projectlombok:lombok' //annotationProcessor 指定编译器在编译时需要使用的注解处理器

        //以下二者为junit5测试依赖,缺一不可.api负责编译,engine负责运行
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.3' //testImplementation 相当于test,只在测试时需要,不会被打包
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.3' //testRuntimeOnly 当运行测试方法时不会参与编译
    }

    //该标签相当于maven中的dependencyManagement标签,用于管理依赖的版本
    //注:gradle本身并不能识别dependencyManagement标签,该标签需要 io.spring.dependency-management 插件的支持
    dependencyManagement {
        dependencies {
            dependency 'org.mybatis:mybatis:3.5.16' //纳入版本管理中的依赖
            imports { //imports表示引入这些依赖的依赖管理而不是依赖本身,相当于scope=pom
                //直接将Springboot纳入版本依赖管理,导入Springboot的另一种非官方方式
                //mavenBom 'org.springframework.boot:spring-boot-dependencies:3.3.4'
                //目前没找到spring cloud相关的插件,这是唯一导入spring cloud的方法
                mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.4'
            }
        }
    }

    test { //测试相关配置,可以直接执行,运行后会同时执行所有被 @Test 标记的方法
        useJUnitPlatform() //使用junit5
        include 'org/giccqer/test/**' //指定测试类
    }

    archivesBaseName = 'gradle-package' //打包后的jar文件名
    shadowJar { //shadow 插件配置,该插件用于打包jar
        manifest { //配置jar的manifest文件
            attributes 'Main-Class': 'org.giccqer.SecondSubModuleStarter' //配置jar的启动类
        }
    }
}